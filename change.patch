 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a//dev/null b/appsleuth/inventory.py
index 0000000000000000000000000000000000000000..024731b41ee03a84411e438a33c386a01551c87e 100644
--- a//dev/null
+++ b/appsleuth/inventory.py
@@ -0,0 +1,48 @@
+import asyncio
+import json
+import pathlib
+import subprocess
+from dataclasses import dataclass
+from typing import Iterable, List
+
+APP_SUPPORT = pathlib.Path.home() / 'Library' / 'Application Support' / 'AppSleuth'
+APP_SUPPORT.mkdir(parents=True, exist_ok=True)
+INVENTORY_PATH = APP_SUPPORT / 'full_inventory.json'
+
+
+@dataclass
+class AppRecord:
+    name: str
+    path: pathlib.Path
+    obtained_from: str
+    signed_by_apple: bool
+
+
+def _parse_records(data: dict) -> List[AppRecord]:
+    apps = []
+    items = data.get('SPApplicationsDataType', [])
+    for item in items:
+        path = pathlib.Path(item.get('path', ''))
+        apps.append(
+            AppRecord(
+                name=item.get('_name', path.name),
+                path=path,
+                obtained_from=item.get('obtained_from', 'Unknown'),
+                signed_by_apple=item.get('signed_by_apple', False),
+            )
+        )
+    return apps
+
+
+async def gather_inventory() -> List[AppRecord]:
+    loop = asyncio.get_running_loop()
+    proc = await asyncio.create_subprocess_exec(
+        'system_profiler', 'SPApplicationsDataType', '-json',
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+    )
+    stdout, _ = await proc.communicate()
+    INVENTORY_PATH.write_bytes(stdout)
+    data = json.loads(stdout)
+    return _parse_records(data)
+
 
EOF
)