 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a//dev/null b/appsleuth/classify.py
index 0000000000000000000000000000000000000000..00c4465fffee3784070e54448aea1879032bbbb5 100644
--- a//dev/null
+++ b/appsleuth/classify.py
@@ -0,0 +1,37 @@
+import pathlib
+from typing import Iterable
+
+from .inventory import AppRecord
+
+APP_SUPPORT = pathlib.Path.home() / 'Library' / 'Application Support' / 'AppSleuth'
+DEFAULT_CORE_WHITELIST = APP_SUPPORT / 'core_whitelist.txt'
+APPROVED_APPS = APP_SUPPORT / 'approved_apps.txt'
+
+
+class Classifier:
+    def __init__(self, core_whitelist: pathlib.Path | None = None):
+        self.core_whitelist = core_whitelist or DEFAULT_CORE_WHITELIST
+        self.core_whitelist.touch(exist_ok=True)
+        APPROVED_APPS.touch(exist_ok=True)
+        self._core = {line.strip() for line in self.core_whitelist.read_text().splitlines() if line.strip()}
+        self._approved = {line.strip() for line in APPROVED_APPS.read_text().splitlines() if line.strip()}
+
+    def mark(self, record: AppRecord) -> None:
+        record.essential = self.is_essential(record)
+        record.candidate = (not record.essential) and (record.name not in self._approved)
+
+    def classify(self, records: Iterable[AppRecord]) -> Iterable[AppRecord]:
+        for rec in records:
+            self.mark(rec)
+            yield rec
+
+    def is_essential(self, record: AppRecord) -> bool:
+        if str(record.path).startswith('/System/'):
+            return True
+        if (record.obtained_from in {'Apple', 'Mac App Store'} and
+                str(record.path).startswith('/Applications/Utilities')):
+            return True
+        if record.name in self._core:
+            return True
+        return False
+
 
EOF
)